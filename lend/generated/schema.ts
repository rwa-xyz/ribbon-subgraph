// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalPremiumEarned(): BigInt {
    let value = this.get("totalPremiumEarned");
    return value.toBigInt();
  }

  set totalPremiumEarned(value: BigInt) {
    this.set("totalPremiumEarned", Value.fromBigInt(value));
  }

  get totalNominalVolume(): BigInt {
    let value = this.get("totalNominalVolume");
    return value.toBigInt();
  }

  set totalNominalVolume(value: BigInt) {
    this.set("totalNominalVolume", Value.fromBigInt(value));
  }

  get totalNotionalVolume(): BigInt {
    let value = this.get("totalNotionalVolume");
    return value.toBigInt();
  }

  set totalNotionalVolume(value: BigInt) {
    this.set("totalNotionalVolume", Value.fromBigInt(value));
  }

  get numDepositors(): i32 {
    let value = this.get("numDepositors");
    return value.toI32();
  }

  set numDepositors(value: i32) {
    this.set("numDepositors", Value.fromI32(value));
  }

  get depositors(): Array<Bytes> {
    let value = this.get("depositors");
    return value.toBytesArray();
  }

  set depositors(value: Array<Bytes>) {
    this.set("depositors", Value.fromBytesArray(value));
  }

  get vaultAccounts(): Array<string> {
    let value = this.get("vaultAccounts");
    return value.toStringArray();
  }

  set vaultAccounts(value: Array<string>) {
    this.set("vaultAccounts", Value.fromStringArray(value));
  }

  get totalBalance(): BigInt {
    let value = this.get("totalBalance");
    return value.toBigInt();
  }

  set totalBalance(value: BigInt) {
    this.set("totalBalance", Value.fromBigInt(value));
  }

  get performanceFeeCollected(): BigInt {
    let value = this.get("performanceFeeCollected");
    return value.toBigInt();
  }

  set performanceFeeCollected(value: BigInt) {
    this.set("performanceFeeCollected", Value.fromBigInt(value));
  }

  get managementFeeCollected(): BigInt {
    let value = this.get("managementFeeCollected");
    return value.toBigInt();
  }

  set managementFeeCollected(value: BigInt) {
    this.set("managementFeeCollected", Value.fromBigInt(value));
  }

  get totalFeeCollected(): BigInt {
    let value = this.get("totalFeeCollected");
    return value.toBigInt();
  }

  set totalFeeCollected(value: BigInt) {
    this.set("totalFeeCollected", Value.fromBigInt(value));
  }
}

export class VaultBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VaultBorrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VaultBorrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VaultBorrow", id.toString(), this);
  }

  static load(id: string): VaultBorrow | null {
    return store.get("VaultBorrow", id) as VaultBorrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get borrowAmount(): BigInt {
    let value = this.get("borrowAmount");
    return value.toBigInt();
  }

  set borrowAmount(value: BigInt) {
    this.set("borrowAmount", Value.fromBigInt(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get borrowedAt(): i32 {
    let value = this.get("borrowedAt");
    return value.toI32();
  }

  set borrowedAt(value: i32) {
    this.set("borrowedAt", Value.fromI32(value));
  }

  get borrowTxhash(): Bytes {
    let value = this.get("borrowTxhash");
    return value.toBytes();
  }

  set borrowTxhash(value: Bytes) {
    this.set("borrowTxhash", Value.fromBytes(value));
  }
}

export class VaultRepay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VaultRepay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VaultRepay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VaultRepay", id.toString(), this);
  }

  static load(id: string): VaultRepay | null {
    return store.get("VaultRepay", id) as VaultRepay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get repaidAmount(): BigInt {
    let value = this.get("repaidAmount");
    return value.toBigInt();
  }

  set repaidAmount(value: BigInt) {
    this.set("repaidAmount", Value.fromBigInt(value));
  }

  get repaidAt(): i32 {
    let value = this.get("repaidAt");
    return value.toI32();
  }

  set repaidAt(value: i32) {
    this.set("repaidAt", Value.fromI32(value));
  }

  get repayTxhash(): Bytes {
    let value = this.get("repayTxhash");
    return value.toBytes();
  }

  set repayTxhash(value: Bytes) {
    this.set("repayTxhash", Value.fromBytes(value));
  }
}

export class VaultAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VaultAccount entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VaultAccount entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VaultAccount", id.toString(), this);
  }

  static load(id: string): VaultAccount | null {
    return store.get("VaultAccount", id) as VaultAccount | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get updateCounter(): i32 {
    let value = this.get("updateCounter");
    return value.toI32();
  }

  set updateCounter(value: i32) {
    this.set("updateCounter", Value.fromI32(value));
  }

  get totalYieldEarned(): BigInt {
    let value = this.get("totalYieldEarned");
    return value.toBigInt();
  }

  set totalYieldEarned(value: BigInt) {
    this.set("totalYieldEarned", Value.fromBigInt(value));
  }

  get totalDeposits(): BigInt {
    let value = this.get("totalDeposits");
    return value.toBigInt();
  }

  set totalDeposits(value: BigInt) {
    this.set("totalDeposits", Value.fromBigInt(value));
  }

  get totalBalance(): BigInt {
    let value = this.get("totalBalance");
    return value.toBigInt();
  }

  set totalBalance(value: BigInt) {
    this.set("totalBalance", Value.fromBigInt(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }
}

export class VaultTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VaultTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VaultTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VaultTransaction", id.toString(), this);
  }

  static load(id: string): VaultTransaction | null {
    return store.get("VaultTransaction", id) as VaultTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get txhash(): Bytes {
    let value = this.get("txhash");
    return value.toBytes();
  }

  set txhash(value: Bytes) {
    this.set("txhash", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get underlyingAmount(): BigInt {
    let value = this.get("underlyingAmount");
    return value.toBigInt();
  }

  set underlyingAmount(value: BigInt) {
    this.set("underlyingAmount", Value.fromBigInt(value));
  }
}

export class BalanceUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BalanceUpdate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalanceUpdate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalanceUpdate", id.toString(), this);
  }

  static load(id: string): BalanceUpdate | null {
    return store.get("BalanceUpdate", id) as BalanceUpdate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get yieldEarned(): BigInt {
    let value = this.get("yieldEarned");
    return value.toBigInt();
  }

  set yieldEarned(value: BigInt) {
    this.set("yieldEarned", Value.fromBigInt(value));
  }

  get isWithdraw(): boolean {
    let value = this.get("isWithdraw");
    return value.toBoolean();
  }

  set isWithdraw(value: boolean) {
    this.set("isWithdraw", Value.fromBoolean(value));
  }
}

export class ERC20Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC20Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC20Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC20Token", id.toString(), this);
  }

  static load(id: string): ERC20Token | null {
    return store.get("ERC20Token", id) as ERC20Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get numHolders(): i32 {
    let value = this.get("numHolders");
    return value.toI32();
  }

  set numHolders(value: i32) {
    this.set("numHolders", Value.fromI32(value));
  }

  get holders(): Array<Bytes> {
    let value = this.get("holders");
    return value.toBytesArray();
  }

  set holders(value: Array<Bytes>) {
    this.set("holders", Value.fromBytesArray(value));
  }

  get tokenAccounts(): Array<string> {
    let value = this.get("tokenAccounts");
    return value.toStringArray();
  }

  set tokenAccounts(value: Array<string>) {
    this.set("tokenAccounts", Value.fromStringArray(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class ERC20TokenAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ERC20TokenAccount entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ERC20TokenAccount entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ERC20TokenAccount", id.toString(), this);
  }

  static load(id: string): ERC20TokenAccount | null {
    return store.get("ERC20TokenAccount", id) as ERC20TokenAccount | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}
