type Pool @entity {
  id: ID! # pool contract address
  name: String!
  symbol: String!
  decimals: Int!
  totalPremiumEarned: BigInt!
  totalNominalVolume: BigInt!
  # We track this number by adding every open short. This value is in USD, with 16 decimals
  totalNotionalVolume: BigInt!
  numDepositors: Int!
  depositors: [Bytes!]!
  poolAccounts: [PoolAccount!]! @derivedFrom(field: "pool")
  totalBalance: BigInt!
  performanceFeeCollected: BigInt!
  managementFeeCollected: BigInt!
  totalFeeCollected: BigInt!
}

type PoolBorrow @entity {
  id: ID! # option contract address
  pool: Pool!
  borrowAmount: BigInt!
  borrower: Bytes!
  borrowedAt: Int!
  borrowTxhash: Bytes!
}

type PoolRepay @entity {
  id: ID! # option contract address
  pool: Pool!
  repaidAmount: BigInt!
  repaidAt: Int!
  repayTxhash: Bytes!
}

type PoolAccount @entity {
  "poolAddress-accountAddress"
  id: ID!
  pool: Pool!
  account: Bytes!

  "used internally to track BalanceUpdates"
  updateCounter: Int!

  "Account's lifetime yield earned from the pool"
  totalYieldEarned: BigInt!

  "Account's total deposits into the pool (Withdrawal as accounted)"
  totalDeposits: BigInt!

  "To track the current balance, so we can caluclate the net profit/loss"
  totalBalance: BigInt!

  "To track the total number of shares the user has, including scheduled withdrawal"
  shares: BigInt!

}

type PoolTransaction @entity {
  id: ID!
  pool: Pool!
  type: String!
  address: Bytes!
  txhash: Bytes!
  timestamp: Int!
  amount: BigInt!
  underlyingAmount: BigInt! # Used to keep track with underlying amount of stake and unstake transaction
}

type BalanceUpdate @entity {
  id: ID! # accountAddress-timestamp
  pool: Pool!
  account: Bytes!
  timestamp: Int!
  balance: BigInt! # Account's balance in the pool at a point in time
  yieldEarned: BigInt! # Yield earned from a trade at a point in time
  isWithdraw: Boolean!
}

type ERC20Token @entity {
  id: ID! # token contract address
  name: String!
  symbol: String!
  numHolders: Int!
  holders: [Bytes!]!
  tokenAccounts: [ERC20TokenAccount!]! @derivedFrom(field: "token")
  totalSupply: BigInt!
}

type ERC20TokenAccount @entity {
  id: ID! # ERC20TokenID-accountAddress
  token: ERC20Token!
  balance: BigInt!
  account: Bytes!
}