// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RBNToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("numHolders", Value.fromI32(0));
    this.set("holders", Value.fromBytesArray(new Array(0)));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("totalStaked", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RBNToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RBNToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RBNToken", id.toString(), this);
    }
  }

  static load(id: string): RBNToken | null {
    return changetype<RBNToken | null>(store.get("RBNToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get numHolders(): i32 {
    let value = this.get("numHolders");
    return value!.toI32();
  }

  set numHolders(value: i32) {
    this.set("numHolders", Value.fromI32(value));
  }

  get holders(): Array<Bytes> {
    let value = this.get("holders");
    return value!.toBytesArray();
  }

  set holders(value: Array<Bytes>) {
    this.set("holders", Value.fromBytesArray(value));
  }

  get tokenAccounts(): Array<string> {
    let value = this.get("tokenAccounts");
    return value!.toStringArray();
  }

  set tokenAccounts(value: Array<string>) {
    this.set("tokenAccounts", Value.fromStringArray(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value!.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }
}

export class RBNAccount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("totalBalance", Value.fromBigInt(BigInt.zero()));
    this.set("lockedBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RBNAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RBNAccount entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RBNAccount", id.toString(), this);
    }
  }

  static load(id: string): RBNAccount | null {
    return changetype<RBNAccount | null>(store.get("RBNAccount", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get totalBalance(): BigInt {
    let value = this.get("totalBalance");
    return value!.toBigInt();
  }

  set totalBalance(value: BigInt) {
    this.set("totalBalance", Value.fromBigInt(value));
  }

  get lockedBalance(): BigInt {
    let value = this.get("lockedBalance");
    return value!.toBigInt();
  }

  set lockedBalance(value: BigInt) {
    this.set("lockedBalance", Value.fromBigInt(value));
  }

  get lockStartTimestamp(): BigInt | null {
    let value = this.get("lockStartTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockStartTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("lockStartTimestamp");
    } else {
      this.set("lockStartTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get lockEndTimestamp(): BigInt | null {
    let value = this.get("lockEndTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockEndTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("lockEndTimestamp");
    } else {
      this.set("lockEndTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class GovernanceTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("type", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("txhash", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save GovernanceTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GovernanceTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GovernanceTransaction", id.toString(), this);
    }
  }

  static load(id: string): GovernanceTransaction | null {
    return changetype<GovernanceTransaction | null>(
      store.get("GovernanceTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get txhash(): Bytes {
    let value = this.get("txhash");
    return value!.toBytes();
  }

  set txhash(value: Bytes) {
    this.set("txhash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class TokenMinterDistribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TokenMinterDistribution entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenMinterDistribution entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenMinterDistribution", id.toString(), this);
    }
  }

  static load(id: string): TokenMinterDistribution | null {
    return changetype<TokenMinterDistribution | null>(
      store.get("TokenMinterDistribution", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}
