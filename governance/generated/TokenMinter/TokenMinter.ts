// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gauge(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get minted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateMiningParameters extends ethereum.Event {
  get params(): UpdateMiningParameters__Params {
    return new UpdateMiningParameters__Params(this);
  }
}

export class UpdateMiningParameters__Params {
  _event: UpdateMiningParameters;

  constructor(event: UpdateMiningParameters) {
    this._event = event;
  }

  get time(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenMinter extends ethereum.SmartContract {
  static bind(address: Address): TokenMinter {
    return new TokenMinter("TokenMinter", address);
  }

  start_epoch_time_write(): BigInt {
    let result = super.call(
      "start_epoch_time_write",
      "start_epoch_time_write():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_start_epoch_time_write(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "start_epoch_time_write",
      "start_epoch_time_write():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_epoch_time_write(): BigInt {
    let result = super.call(
      "future_epoch_time_write",
      "future_epoch_time_write():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_future_epoch_time_write(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "future_epoch_time_write",
      "future_epoch_time_write():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recover_balance(_coin: Address): boolean {
    let result = super.call(
      "recover_balance",
      "recover_balance(address):(bool)",
      [ethereum.Value.fromAddress(_coin)]
    );

    return result[0].toBoolean();
  }

  try_recover_balance(_coin: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "recover_balance",
      "recover_balance(address):(bool)",
      [ethereum.Value.fromAddress(_coin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mining_epoch(): BigInt {
    let result = super.call("mining_epoch", "mining_epoch():(int128)", []);

    return result[0].toBigInt();
  }

  try_mining_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mining_epoch", "mining_epoch():(int128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  start_epoch_time(): BigInt {
    let result = super.call(
      "start_epoch_time",
      "start_epoch_time():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_start_epoch_time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "start_epoch_time",
      "start_epoch_time():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  committed_rate(): BigInt {
    let result = super.call("committed_rate", "committed_rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_committed_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "committed_rate",
      "committed_rate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  is_start(): boolean {
    let result = super.call("is_start", "is_start():(bool)", []);

    return result[0].toBoolean();
  }

  try_is_start(): ethereum.CallResult<boolean> {
    let result = super.tryCall("is_start", "is_start():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minted(arg0: Address, arg1: Address): BigInt {
    let result = super.call("minted", "minted(address,address):(uint256)", [
      ethereum.Value.fromAddress(arg0),
      ethereum.Value.fromAddress(arg1)
    ]);

    return result[0].toBigInt();
  }

  try_minted(arg0: Address, arg1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minted", "minted(address,address):(uint256)", [
      ethereum.Value.fromAddress(arg0),
      ethereum.Value.fromAddress(arg1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowed_to_mint_for(arg0: Address, arg1: Address): boolean {
    let result = super.call(
      "allowed_to_mint_for",
      "allowed_to_mint_for(address,address):(bool)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );

    return result[0].toBoolean();
  }

  try_allowed_to_mint_for(
    arg0: Address,
    arg1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowed_to_mint_for",
      "allowed_to_mint_for(address,address):(bool)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  emergency_return(): Address {
    let result = super.call(
      "emergency_return",
      "emergency_return():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_emergency_return(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "emergency_return",
      "emergency_return():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _emergency_return(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class Update_mining_parametersCall extends ethereum.Call {
  get inputs(): Update_mining_parametersCall__Inputs {
    return new Update_mining_parametersCall__Inputs(this);
  }

  get outputs(): Update_mining_parametersCall__Outputs {
    return new Update_mining_parametersCall__Outputs(this);
  }
}

export class Update_mining_parametersCall__Inputs {
  _call: Update_mining_parametersCall;

  constructor(call: Update_mining_parametersCall) {
    this._call = call;
  }
}

export class Update_mining_parametersCall__Outputs {
  _call: Update_mining_parametersCall;

  constructor(call: Update_mining_parametersCall) {
    this._call = call;
  }
}

export class Start_epoch_time_writeCall extends ethereum.Call {
  get inputs(): Start_epoch_time_writeCall__Inputs {
    return new Start_epoch_time_writeCall__Inputs(this);
  }

  get outputs(): Start_epoch_time_writeCall__Outputs {
    return new Start_epoch_time_writeCall__Outputs(this);
  }
}

export class Start_epoch_time_writeCall__Inputs {
  _call: Start_epoch_time_writeCall;

  constructor(call: Start_epoch_time_writeCall) {
    this._call = call;
  }
}

export class Start_epoch_time_writeCall__Outputs {
  _call: Start_epoch_time_writeCall;

  constructor(call: Start_epoch_time_writeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Future_epoch_time_writeCall extends ethereum.Call {
  get inputs(): Future_epoch_time_writeCall__Inputs {
    return new Future_epoch_time_writeCall__Inputs(this);
  }

  get outputs(): Future_epoch_time_writeCall__Outputs {
    return new Future_epoch_time_writeCall__Outputs(this);
  }
}

export class Future_epoch_time_writeCall__Inputs {
  _call: Future_epoch_time_writeCall;

  constructor(call: Future_epoch_time_writeCall) {
    this._call = call;
  }
}

export class Future_epoch_time_writeCall__Outputs {
  _call: Future_epoch_time_writeCall;

  constructor(call: Future_epoch_time_writeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get gauge_addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class Mint_manyCall extends ethereum.Call {
  get inputs(): Mint_manyCall__Inputs {
    return new Mint_manyCall__Inputs(this);
  }

  get outputs(): Mint_manyCall__Outputs {
    return new Mint_manyCall__Outputs(this);
  }
}

export class Mint_manyCall__Inputs {
  _call: Mint_manyCall;

  constructor(call: Mint_manyCall) {
    this._call = call;
  }

  get gauge_addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class Mint_manyCall__Outputs {
  _call: Mint_manyCall;

  constructor(call: Mint_manyCall) {
    this._call = call;
  }
}

export class Mint_forCall extends ethereum.Call {
  get inputs(): Mint_forCall__Inputs {
    return new Mint_forCall__Inputs(this);
  }

  get outputs(): Mint_forCall__Outputs {
    return new Mint_forCall__Outputs(this);
  }
}

export class Mint_forCall__Inputs {
  _call: Mint_forCall;

  constructor(call: Mint_forCall) {
    this._call = call;
  }

  get gauge_addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _for(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Mint_forCall__Outputs {
  _call: Mint_forCall;

  constructor(call: Mint_forCall) {
    this._call = call;
  }
}

export class Toggle_approve_mintCall extends ethereum.Call {
  get inputs(): Toggle_approve_mintCall__Inputs {
    return new Toggle_approve_mintCall__Inputs(this);
  }

  get outputs(): Toggle_approve_mintCall__Outputs {
    return new Toggle_approve_mintCall__Outputs(this);
  }
}

export class Toggle_approve_mintCall__Inputs {
  _call: Toggle_approve_mintCall;

  constructor(call: Toggle_approve_mintCall) {
    this._call = call;
  }

  get minting_user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Toggle_approve_mintCall__Outputs {
  _call: Toggle_approve_mintCall;

  constructor(call: Toggle_approve_mintCall) {
    this._call = call;
  }
}

export class Recover_balanceCall extends ethereum.Call {
  get inputs(): Recover_balanceCall__Inputs {
    return new Recover_balanceCall__Inputs(this);
  }

  get outputs(): Recover_balanceCall__Outputs {
    return new Recover_balanceCall__Outputs(this);
  }
}

export class Recover_balanceCall__Inputs {
  _call: Recover_balanceCall;

  constructor(call: Recover_balanceCall) {
    this._call = call;
  }

  get _coin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Recover_balanceCall__Outputs {
  _call: Recover_balanceCall;

  constructor(call: Recover_balanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Commit_new_rateCall extends ethereum.Call {
  get inputs(): Commit_new_rateCall__Inputs {
    return new Commit_new_rateCall__Inputs(this);
  }

  get outputs(): Commit_new_rateCall__Outputs {
    return new Commit_new_rateCall__Outputs(this);
  }
}

export class Commit_new_rateCall__Inputs {
  _call: Commit_new_rateCall;

  constructor(call: Commit_new_rateCall) {
    this._call = call;
  }

  get _new_rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Commit_new_rateCall__Outputs {
  _call: Commit_new_rateCall;

  constructor(call: Commit_new_rateCall) {
    this._call = call;
  }
}

export class Change_emergency_returnCall extends ethereum.Call {
  get inputs(): Change_emergency_returnCall__Inputs {
    return new Change_emergency_returnCall__Inputs(this);
  }

  get outputs(): Change_emergency_returnCall__Outputs {
    return new Change_emergency_returnCall__Outputs(this);
  }
}

export class Change_emergency_returnCall__Inputs {
  _call: Change_emergency_returnCall;

  constructor(call: Change_emergency_returnCall) {
    this._call = call;
  }

  get _emergency_return(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Change_emergency_returnCall__Outputs {
  _call: Change_emergency_returnCall;

  constructor(call: Change_emergency_returnCall) {
    this._call = call;
  }
}

export class Change_adminCall extends ethereum.Call {
  get inputs(): Change_adminCall__Inputs {
    return new Change_adminCall__Inputs(this);
  }

  get outputs(): Change_adminCall__Outputs {
    return new Change_adminCall__Outputs(this);
  }
}

export class Change_adminCall__Inputs {
  _call: Change_adminCall;

  constructor(call: Change_adminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Change_adminCall__Outputs {
  _call: Change_adminCall;

  constructor(call: Change_adminCall) {
    this._call = call;
  }
}
