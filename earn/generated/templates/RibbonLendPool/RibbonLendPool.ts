// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrowed extends ethereum.Event {
  get params(): Borrowed__Params {
    return new Borrowed__Params(this);
  }
}

export class Borrowed__Params {
  _event: Borrowed;

  constructor(event: Borrowed) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Closed extends ethereum.Event {
  get params(): Closed__Params {
    return new Closed__Params(this);
  }
}

export class Closed__Params {
  _event: Closed;

  constructor(event: Closed) {
    this._event = event;
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Provided extends ethereum.Event {
  get params(): Provided__Params {
    return new Provided__Params(this);
  }
}

export class Provided__Params {
  _event: Provided;

  constructor(event: Provided) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Provided1 extends ethereum.Event {
  get params(): Provided1__Params {
    return new Provided1__Params(this);
  }
}

export class Provided1__Params {
  _event: Provided1;

  constructor(event: Provided1) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Repaid extends ethereum.Event {
  get params(): Repaid__Params {
    return new Repaid__Params(this);
  }
}

export class Repaid__Params {
  _event: Repaid;

  constructor(event: Repaid) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardPerSecondSet extends ethereum.Event {
  get params(): RewardPerSecondSet__Params {
    return new RewardPerSecondSet__Params(this);
  }
}

export class RewardPerSecondSet__Params {
  _event: RewardPerSecondSet;

  constructor(event: RewardPerSecondSet) {
    this._event = event;
  }

  get newRewardPerSecond(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardWithdrawn extends ethereum.Event {
  get params(): RewardWithdrawn__Params {
    return new RewardWithdrawn__Params(this);
  }
}

export class RewardWithdrawn__Params {
  _event: RewardWithdrawn;

  constructor(event: RewardWithdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RibbonLendPool extends ethereum.SmartContract {
  static bind(address: Address): RibbonLendPool {
    return new RibbonLendPool("RibbonLendPool", address);
  }

  accumulativeRewardOf(account: Address): BigInt {
    let result = super.call(
      "accumulativeRewardOf",
      "accumulativeRewardOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_accumulativeRewardOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulativeRewardOf",
      "accumulativeRewardOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableToBorrow(): BigInt {
    let result = super.call(
      "availableToBorrow",
      "availableToBorrow():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableToBorrow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableToBorrow",
      "availableToBorrow():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableToWithdraw(): BigInt {
    let result = super.call(
      "availableToWithdraw",
      "availableToWithdraw():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableToWithdraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableToWithdraw",
      "availableToWithdraw():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrows(): BigInt {
    let result = super.call("borrows", "borrows():(uint256)", []);

    return result[0].toBigInt();
  }

  try_borrows(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrows", "borrows():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cash(): BigInt {
    let result = super.call("cash", "cash():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cash(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cash", "cash():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  debtClaimed(): boolean {
    let result = super.call("debtClaimed", "debtClaimed():(bool)", []);

    return result[0].toBoolean();
  }

  try_debtClaimed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("debtClaimed", "debtClaimed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enteredProvisionalDefault(): BigInt {
    let result = super.call(
      "enteredProvisionalDefault",
      "enteredProvisionalDefault():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_enteredProvisionalDefault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enteredProvisionalDefault",
      "enteredProvisionalDefault():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  enteredZeroUtilization(): BigInt {
    let result = super.call(
      "enteredZeroUtilization",
      "enteredZeroUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_enteredZeroUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "enteredZeroUtilization",
      "enteredZeroUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBorrowRate(): BigInt {
    let result = super.call("getBorrowRate", "getBorrowRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowRate",
      "getBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentExchangeRate(): BigInt {
    let result = super.call(
      "getCurrentExchangeRate",
      "getCurrentExchangeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentExchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentExchangeRate",
      "getCurrentExchangeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSupplyRate(): BigInt {
    let result = super.call("getSupplyRate", "getSupplyRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSupplyRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSupplyRate",
      "getSupplyRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUtilizationRate(): BigInt {
    let result = super.call(
      "getUtilizationRate",
      "getUtilizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUtilizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUtilizationRate",
      "getUtilizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  insurance(): BigInt {
    let result = super.call("insurance", "insurance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_insurance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("insurance", "insurance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  insuranceFactor(): BigInt {
    let result = super.call(
      "insuranceFactor",
      "insuranceFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_insuranceFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "insuranceFactor",
      "insuranceFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interest(): BigInt {
    let result = super.call("interest", "interest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interest", "interest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestRateModel(): Address {
    let result = super.call(
      "interestRateModel",
      "interestRateModel():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_interestRateModel(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interestRateModel",
      "interestRateModel():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastAccrual(): BigInt {
    let result = super.call("lastAccrual", "lastAccrual():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastAccrual(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastAccrual", "lastAccrual():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxInactivePeriod(): BigInt {
    let result = super.call(
      "maxInactivePeriod",
      "maxInactivePeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxInactivePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxInactivePeriod",
      "maxInactivePeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOfDebt(): Address {
    let result = super.call("ownerOfDebt", "ownerOfDebt():(address)", []);

    return result[0].toAddress();
  }

  try_ownerOfDebt(): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOfDebt", "ownerOfDebt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodToStartAuction(): BigInt {
    let result = super.call(
      "periodToStartAuction",
      "periodToStartAuction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_periodToStartAuction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodToStartAuction",
      "periodToStartAuction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolSize(): BigInt {
    let result = super.call("poolSize", "poolSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolSize", "poolSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principal(): BigInt {
    let result = super.call("principal", "principal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_principal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("principal", "principal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provisionalDefaultUtilization(): BigInt {
    let result = super.call(
      "provisionalDefaultUtilization",
      "provisionalDefaultUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_provisionalDefaultUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "provisionalDefaultUtilization",
      "provisionalDefaultUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveFactor(): BigInt {
    let result = super.call("reserveFactor", "reserveFactor():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reserveFactor",
      "reserveFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserves(): BigInt {
    let result = super.call("reserves", "reserves():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserves(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserves", "reserves():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerSecond(): BigInt {
    let result = super.call(
      "rewardPerSecond",
      "rewardPerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerSecond",
      "rewardPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(): i32 {
    let result = super.call("state", "state():(uint8)", []);

    return result[0].toI32();
  }

  try_state(): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  warningGracePeriod(): BigInt {
    let result = super.call(
      "warningGracePeriod",
      "warningGracePeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_warningGracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "warningGracePeriod",
      "warningGracePeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  warningUtilization(): BigInt {
    let result = super.call(
      "warningUtilization",
      "warningUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_warningUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "warningUtilization",
      "warningUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawReward(account: Address): BigInt {
    let result = super.call(
      "withdrawReward",
      "withdrawReward(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_withdrawReward(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawReward",
      "withdrawReward(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawableRewardOf(account: Address): BigInt {
    let result = super.call(
      "withdrawableRewardOf",
      "withdrawableRewardOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_withdrawableRewardOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableRewardOf",
      "withdrawableRewardOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawnRewardOf(account: Address): BigInt {
    let result = super.call(
      "withdrawnRewardOf",
      "withdrawnRewardOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_withdrawnRewardOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawnRewardOf",
      "withdrawnRewardOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AllowWithdrawalAfterNoAuctionCall extends ethereum.Call {
  get inputs(): AllowWithdrawalAfterNoAuctionCall__Inputs {
    return new AllowWithdrawalAfterNoAuctionCall__Inputs(this);
  }

  get outputs(): AllowWithdrawalAfterNoAuctionCall__Outputs {
    return new AllowWithdrawalAfterNoAuctionCall__Outputs(this);
  }
}

export class AllowWithdrawalAfterNoAuctionCall__Inputs {
  _call: AllowWithdrawalAfterNoAuctionCall;

  constructor(call: AllowWithdrawalAfterNoAuctionCall) {
    this._call = call;
  }
}

export class AllowWithdrawalAfterNoAuctionCall__Outputs {
  _call: AllowWithdrawalAfterNoAuctionCall;

  constructor(call: AllowWithdrawalAfterNoAuctionCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ForceDefaultCall extends ethereum.Call {
  get inputs(): ForceDefaultCall__Inputs {
    return new ForceDefaultCall__Inputs(this);
  }

  get outputs(): ForceDefaultCall__Outputs {
    return new ForceDefaultCall__Outputs(this);
  }
}

export class ForceDefaultCall__Inputs {
  _call: ForceDefaultCall;

  constructor(call: ForceDefaultCall) {
    this._call = call;
  }
}

export class ForceDefaultCall__Outputs {
  _call: ForceDefaultCall;

  constructor(call: ForceDefaultCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get manager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currency_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ProcessAuctionStartCall extends ethereum.Call {
  get inputs(): ProcessAuctionStartCall__Inputs {
    return new ProcessAuctionStartCall__Inputs(this);
  }

  get outputs(): ProcessAuctionStartCall__Outputs {
    return new ProcessAuctionStartCall__Outputs(this);
  }
}

export class ProcessAuctionStartCall__Inputs {
  _call: ProcessAuctionStartCall;

  constructor(call: ProcessAuctionStartCall) {
    this._call = call;
  }
}

export class ProcessAuctionStartCall__Outputs {
  _call: ProcessAuctionStartCall;

  constructor(call: ProcessAuctionStartCall) {
    this._call = call;
  }
}

export class ProcessDebtClaimCall extends ethereum.Call {
  get inputs(): ProcessDebtClaimCall__Inputs {
    return new ProcessDebtClaimCall__Inputs(this);
  }

  get outputs(): ProcessDebtClaimCall__Outputs {
    return new ProcessDebtClaimCall__Outputs(this);
  }
}

export class ProcessDebtClaimCall__Inputs {
  _call: ProcessDebtClaimCall;

  constructor(call: ProcessDebtClaimCall) {
    this._call = call;
  }
}

export class ProcessDebtClaimCall__Outputs {
  _call: ProcessDebtClaimCall;

  constructor(call: ProcessDebtClaimCall) {
    this._call = call;
  }
}

export class ProvideCall extends ethereum.Call {
  get inputs(): ProvideCall__Inputs {
    return new ProvideCall__Inputs(this);
  }

  get outputs(): ProvideCall__Outputs {
    return new ProvideCall__Outputs(this);
  }
}

export class ProvideCall__Inputs {
  _call: ProvideCall;

  constructor(call: ProvideCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get referral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ProvideCall__Outputs {
  _call: ProvideCall;

  constructor(call: ProvideCall) {
    this._call = call;
  }
}

export class ProvideWithPermitCall extends ethereum.Call {
  get inputs(): ProvideWithPermitCall__Inputs {
    return new ProvideWithPermitCall__Inputs(this);
  }

  get outputs(): ProvideWithPermitCall__Outputs {
    return new ProvideWithPermitCall__Outputs(this);
  }
}

export class ProvideWithPermitCall__Inputs {
  _call: ProvideWithPermitCall;

  constructor(call: ProvideWithPermitCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get referral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ProvideWithPermitCall__Outputs {
  _call: ProvideWithPermitCall;

  constructor(call: ProvideWithPermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get tokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemCurrencyCall extends ethereum.Call {
  get inputs(): RedeemCurrencyCall__Inputs {
    return new RedeemCurrencyCall__Inputs(this);
  }

  get outputs(): RedeemCurrencyCall__Outputs {
    return new RedeemCurrencyCall__Outputs(this);
  }
}

export class RedeemCurrencyCall__Inputs {
  _call: RedeemCurrencyCall;

  constructor(call: RedeemCurrencyCall) {
    this._call = call;
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCurrencyCall__Outputs {
  _call: RedeemCurrencyCall;

  constructor(call: RedeemCurrencyCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get closeNow(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SetInsuranceFactorCall extends ethereum.Call {
  get inputs(): SetInsuranceFactorCall__Inputs {
    return new SetInsuranceFactorCall__Inputs(this);
  }

  get outputs(): SetInsuranceFactorCall__Outputs {
    return new SetInsuranceFactorCall__Outputs(this);
  }
}

export class SetInsuranceFactorCall__Inputs {
  _call: SetInsuranceFactorCall;

  constructor(call: SetInsuranceFactorCall) {
    this._call = call;
  }

  get insuranceFactor_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInsuranceFactorCall__Outputs {
  _call: SetInsuranceFactorCall;

  constructor(call: SetInsuranceFactorCall) {
    this._call = call;
  }
}

export class SetInterestRateModelCall extends ethereum.Call {
  get inputs(): SetInterestRateModelCall__Inputs {
    return new SetInterestRateModelCall__Inputs(this);
  }

  get outputs(): SetInterestRateModelCall__Outputs {
    return new SetInterestRateModelCall__Outputs(this);
  }
}

export class SetInterestRateModelCall__Inputs {
  _call: SetInterestRateModelCall;

  constructor(call: SetInterestRateModelCall) {
    this._call = call;
  }

  get interestRateModel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInterestRateModelCall__Outputs {
  _call: SetInterestRateModelCall;

  constructor(call: SetInterestRateModelCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get manager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetMaxInactivePeriodCall extends ethereum.Call {
  get inputs(): SetMaxInactivePeriodCall__Inputs {
    return new SetMaxInactivePeriodCall__Inputs(this);
  }

  get outputs(): SetMaxInactivePeriodCall__Outputs {
    return new SetMaxInactivePeriodCall__Outputs(this);
  }
}

export class SetMaxInactivePeriodCall__Inputs {
  _call: SetMaxInactivePeriodCall;

  constructor(call: SetMaxInactivePeriodCall) {
    this._call = call;
  }

  get maxInactivePeriod_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxInactivePeriodCall__Outputs {
  _call: SetMaxInactivePeriodCall;

  constructor(call: SetMaxInactivePeriodCall) {
    this._call = call;
  }
}

export class SetPeriodToStartAuctionCall extends ethereum.Call {
  get inputs(): SetPeriodToStartAuctionCall__Inputs {
    return new SetPeriodToStartAuctionCall__Inputs(this);
  }

  get outputs(): SetPeriodToStartAuctionCall__Outputs {
    return new SetPeriodToStartAuctionCall__Outputs(this);
  }
}

export class SetPeriodToStartAuctionCall__Inputs {
  _call: SetPeriodToStartAuctionCall;

  constructor(call: SetPeriodToStartAuctionCall) {
    this._call = call;
  }

  get periodToStartAuction_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPeriodToStartAuctionCall__Outputs {
  _call: SetPeriodToStartAuctionCall;

  constructor(call: SetPeriodToStartAuctionCall) {
    this._call = call;
  }
}

export class SetProvisionalDefaultUtilizationCall extends ethereum.Call {
  get inputs(): SetProvisionalDefaultUtilizationCall__Inputs {
    return new SetProvisionalDefaultUtilizationCall__Inputs(this);
  }

  get outputs(): SetProvisionalDefaultUtilizationCall__Outputs {
    return new SetProvisionalDefaultUtilizationCall__Outputs(this);
  }
}

export class SetProvisionalDefaultUtilizationCall__Inputs {
  _call: SetProvisionalDefaultUtilizationCall;

  constructor(call: SetProvisionalDefaultUtilizationCall) {
    this._call = call;
  }

  get provisionalDefaultUtilization_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProvisionalDefaultUtilizationCall__Outputs {
  _call: SetProvisionalDefaultUtilizationCall;

  constructor(call: SetProvisionalDefaultUtilizationCall) {
    this._call = call;
  }
}

export class SetReserveFactorCall extends ethereum.Call {
  get inputs(): SetReserveFactorCall__Inputs {
    return new SetReserveFactorCall__Inputs(this);
  }

  get outputs(): SetReserveFactorCall__Outputs {
    return new SetReserveFactorCall__Outputs(this);
  }
}

export class SetReserveFactorCall__Inputs {
  _call: SetReserveFactorCall;

  constructor(call: SetReserveFactorCall) {
    this._call = call;
  }

  get reserveFactor_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReserveFactorCall__Outputs {
  _call: SetReserveFactorCall;

  constructor(call: SetReserveFactorCall) {
    this._call = call;
  }
}

export class SetRewardPerSecondCall extends ethereum.Call {
  get inputs(): SetRewardPerSecondCall__Inputs {
    return new SetRewardPerSecondCall__Inputs(this);
  }

  get outputs(): SetRewardPerSecondCall__Outputs {
    return new SetRewardPerSecondCall__Outputs(this);
  }
}

export class SetRewardPerSecondCall__Inputs {
  _call: SetRewardPerSecondCall;

  constructor(call: SetRewardPerSecondCall) {
    this._call = call;
  }

  get rewardPerSecond_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardPerSecondCall__Outputs {
  _call: SetRewardPerSecondCall;

  constructor(call: SetRewardPerSecondCall) {
    this._call = call;
  }
}

export class SetSymbolCall extends ethereum.Call {
  get inputs(): SetSymbolCall__Inputs {
    return new SetSymbolCall__Inputs(this);
  }

  get outputs(): SetSymbolCall__Outputs {
    return new SetSymbolCall__Outputs(this);
  }
}

export class SetSymbolCall__Inputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }

  get symbol_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSymbolCall__Outputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }
}

export class SetWarningGracePeriodCall extends ethereum.Call {
  get inputs(): SetWarningGracePeriodCall__Inputs {
    return new SetWarningGracePeriodCall__Inputs(this);
  }

  get outputs(): SetWarningGracePeriodCall__Outputs {
    return new SetWarningGracePeriodCall__Outputs(this);
  }
}

export class SetWarningGracePeriodCall__Inputs {
  _call: SetWarningGracePeriodCall;

  constructor(call: SetWarningGracePeriodCall) {
    this._call = call;
  }

  get warningGracePeriod_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWarningGracePeriodCall__Outputs {
  _call: SetWarningGracePeriodCall;

  constructor(call: SetWarningGracePeriodCall) {
    this._call = call;
  }
}

export class SetWarningUtilizationCall extends ethereum.Call {
  get inputs(): SetWarningUtilizationCall__Inputs {
    return new SetWarningUtilizationCall__Inputs(this);
  }

  get outputs(): SetWarningUtilizationCall__Outputs {
    return new SetWarningUtilizationCall__Outputs(this);
  }
}

export class SetWarningUtilizationCall__Inputs {
  _call: SetWarningUtilizationCall;

  constructor(call: SetWarningUtilizationCall) {
    this._call = call;
  }

  get warningUtilization_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWarningUtilizationCall__Outputs {
  _call: SetWarningUtilizationCall;

  constructor(call: SetWarningUtilizationCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferReservesCall extends ethereum.Call {
  get inputs(): TransferReservesCall__Inputs {
    return new TransferReservesCall__Inputs(this);
  }

  get outputs(): TransferReservesCall__Outputs {
    return new TransferReservesCall__Outputs(this);
  }
}

export class TransferReservesCall__Inputs {
  _call: TransferReservesCall;

  constructor(call: TransferReservesCall) {
    this._call = call;
  }
}

export class TransferReservesCall__Outputs {
  _call: TransferReservesCall;

  constructor(call: TransferReservesCall) {
    this._call = call;
  }
}

export class WithdrawRewardCall extends ethereum.Call {
  get inputs(): WithdrawRewardCall__Inputs {
    return new WithdrawRewardCall__Inputs(this);
  }

  get outputs(): WithdrawRewardCall__Outputs {
    return new WithdrawRewardCall__Outputs(this);
  }
}

export class WithdrawRewardCall__Inputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawRewardCall__Outputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
