// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BorrowerBasketUpdated extends ethereum.Event {
  get params(): BorrowerBasketUpdated__Params {
    return new BorrowerBasketUpdated__Params(this);
  }
}

export class BorrowerBasketUpdated__Params {
  _event: BorrowerBasketUpdated;

  constructor(event: BorrowerBasketUpdated) {
    this._event = event;
  }

  get borrowers(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get borrowerWeights(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class CapSet extends ethereum.Event {
  get params(): CapSet__Params {
    return new CapSet__Params(this);
  }
}

export class CapSet__Params {
  _event: CapSet;

  constructor(event: CapSet) {
    this._event = event;
  }

  get oldCap(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CloseLoan extends ethereum.Event {
  get params(): CloseLoan__Params {
    return new CloseLoan__Params(this);
  }
}

export class CloseLoan__Params {
  _event: CloseLoan;

  constructor(event: CloseLoan) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _yield(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CollectVaultFees extends ethereum.Event {
  get params(): CollectVaultFees__Params {
    return new CollectVaultFees__Params(this);
  }
}

export class CollectVaultFees__Params {
  _event: CollectVaultFees;

  constructor(event: CollectVaultFees) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vaultFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CommitBorrowerBasket extends ethereum.Event {
  get params(): CommitBorrowerBasket__Params {
    return new CommitBorrowerBasket__Params(this);
  }
}

export class CommitBorrowerBasket__Params {
  _event: CommitBorrowerBasket;

  constructor(event: CommitBorrowerBasket) {
    this._event = event;
  }

  get totalBorrowerWeight(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitiateWithdraw extends ethereum.Event {
  get params(): InitiateWithdraw__Params {
    return new InitiateWithdraw__Params(this);
  }
}

export class InitiateWithdraw__Params {
  _event: InitiateWithdraw;

  constructor(event: InitiateWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InstantWithdraw extends ethereum.Event {
  get params(): InstantWithdraw__Params {
    return new InstantWithdraw__Params(this);
  }
}

export class InstantWithdraw__Params {
  _event: InstantWithdraw;

  constructor(event: InstantWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ManagementFeeSet extends ethereum.Event {
  get params(): ManagementFeeSet__Params {
    return new ManagementFeeSet__Params(this);
  }
}

export class ManagementFeeSet__Params {
  _event: ManagementFeeSet;

  constructor(event: ManagementFeeSet) {
    this._event = event;
  }

  get managementFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newManagementFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewLoanOptionAllocationSet extends ethereum.Event {
  get params(): NewLoanOptionAllocationSet__Params {
    return new NewLoanOptionAllocationSet__Params(this);
  }
}

export class NewLoanOptionAllocationSet__Params {
  _event: NewLoanOptionAllocationSet;

  constructor(event: NewLoanOptionAllocationSet) {
    this._event = event;
  }

  get oldLoanAllocation(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldOptionAllocation(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newLoanAllocation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newOptionAllocation(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewLoanTermLength extends ethereum.Event {
  get params(): NewLoanTermLength__Params {
    return new NewLoanTermLength__Params(this);
  }
}

export class NewLoanTermLength__Params {
  _event: NewLoanTermLength;

  constructor(event: NewLoanTermLength) {
    this._event = event;
  }

  get oldLoanTermLength(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLoanTermLength(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewOptionPurchaseFrequency extends ethereum.Event {
  get params(): NewOptionPurchaseFrequency__Params {
    return new NewOptionPurchaseFrequency__Params(this);
  }
}

export class NewOptionPurchaseFrequency__Params {
  _event: NewOptionPurchaseFrequency;

  constructor(event: NewOptionPurchaseFrequency) {
    this._event = event;
  }

  get oldOptionPurchaseFrequency(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newOptionPurchaseFrequency(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenLoan extends ethereum.Event {
  get params(): OpenLoan__Params {
    return new OpenLoan__Params(this);
  }
}

export class OpenLoan__Params {
  _event: OpenLoan;

  constructor(event: OpenLoan) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OptionSellerSet extends ethereum.Event {
  get params(): OptionSellerSet__Params {
    return new OptionSellerSet__Params(this);
  }
}

export class OptionSellerSet__Params {
  _event: OptionSellerSet;

  constructor(event: OptionSellerSet) {
    this._event = event;
  }

  get oldOptionSeller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOptionSeller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PayOptionYield extends ethereum.Event {
  get params(): PayOptionYield__Params {
    return new PayOptionYield__Params(this);
  }
}

export class PayOptionYield__Params {
  _event: PayOptionYield;

  constructor(event: PayOptionYield) {
    this._event = event;
  }

  get _yield(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get netYield(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PerformanceFeeSet extends ethereum.Event {
  get params(): PerformanceFeeSet__Params {
    return new PerformanceFeeSet__Params(this);
  }
}

export class PerformanceFeeSet__Params {
  _event: PerformanceFeeSet;

  constructor(event: PerformanceFeeSet) {
    this._event = event;
  }

  get performanceFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newPerformanceFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PurchaseOption extends ethereum.Event {
  get params(): PurchaseOption__Params {
    return new PurchaseOption__Params(this);
  }
}

export class PurchaseOption__Params {
  _event: PurchaseOption;

  constructor(event: PurchaseOption) {
    this._event = event;
  }

  get premium(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get share(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RibbonEarnVault__allocationStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: i32;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: i32,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class RibbonEarnVault__borrowerWeightsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class RibbonEarnVault__depositReceiptsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class RibbonEarnVault__shareBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class RibbonEarnVault__vaultParamsResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: i32, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class RibbonEarnVault__vaultStateResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class RibbonEarnVault__withdrawalsResult {
  value0: i32;
  value1: BigInt;

  constructor(value0: i32, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class RibbonEarnVault extends ethereum.SmartContract {
  static bind(address: Address): RibbonEarnVault {
    return new RibbonEarnVault("RibbonEarnVault", address);
  }

  TOTAL_PCT(): i32 {
    let result = super.call("TOTAL_PCT", "TOTAL_PCT():(uint16)", []);

    return result[0].toI32();
  }

  try_TOTAL_PCT(): ethereum.CallResult<i32> {
    let result = super.tryCall("TOTAL_PCT", "TOTAL_PCT():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  accountVaultBalance(account: Address): BigInt {
    let result = super.call(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_accountVaultBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountVaultBalance",
      "accountVaultBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allocationState(): RibbonEarnVault__allocationStateResult {
    let result = super.call(
      "allocationState",
      "allocationState():(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256)",
      []
    );

    return new RibbonEarnVault__allocationStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_allocationState(): ethereum.CallResult<
    RibbonEarnVault__allocationStateResult
  > {
    let result = super.tryCall(
      "allocationState",
      "allocationState():(uint32,uint32,uint32,uint32,uint16,uint16,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__allocationStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowerWeights(param0: Address): RibbonEarnVault__borrowerWeightsResult {
    let result = super.call(
      "borrowerWeights",
      "borrowerWeights(address):(bool,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RibbonEarnVault__borrowerWeightsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_borrowerWeights(
    param0: Address
  ): ethereum.CallResult<RibbonEarnVault__borrowerWeightsResult> {
    let result = super.tryCall(
      "borrowerWeights",
      "borrowerWeights(address):(bool,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__borrowerWeightsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  borrowers(param0: BigInt): Address {
    let result = super.call("borrowers", "borrowers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

<<<<<<< HEAD
  try_borrowers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("borrowers", "borrowers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
=======
  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
>>>>>>> main
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentQueuedWithdrawShares(): BigInt {
    let result = super.call(
      "currentQueuedWithdrawShares",
      "currentQueuedWithdrawShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentQueuedWithdrawShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentQueuedWithdrawShares",
      "currentQueuedWithdrawShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositReceipts(param0: Address): RibbonEarnVault__depositReceiptsResult {
    let result = super.call(
      "depositReceipts",
      "depositReceipts(address):(uint16,uint104,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RibbonEarnVault__depositReceiptsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_depositReceipts(
    param0: Address
  ): ethereum.CallResult<RibbonEarnVault__depositReceiptsResult> {
    let result = super.tryCall(
      "depositReceipts",
      "depositReceipts(address):(uint16,uint104,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__depositReceiptsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastBorrowerBasketChange(): BigInt {
    let result = super.call(
      "lastBorrowerBasketChange",
      "lastBorrowerBasketChange():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastBorrowerBasketChange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastBorrowerBasketChange",
      "lastBorrowerBasketChange():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastOptionSellerChange(): BigInt {
    let result = super.call(
      "lastOptionSellerChange",
      "lastOptionSellerChange():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastOptionSellerChange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastOptionSellerChange",
      "lastOptionSellerChange():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastQueuedWithdrawAmount(): BigInt {
    let result = super.call(
      "lastQueuedWithdrawAmount",
      "lastQueuedWithdrawAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastQueuedWithdrawAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastQueuedWithdrawAmount",
      "lastQueuedWithdrawAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityGauge(): Address {
    let result = super.call("liquidityGauge", "liquidityGauge():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityGauge(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityGauge",
      "liquidityGauge():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managementFee(): BigInt {
    let result = super.call("managementFee", "managementFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managementFee",
      "managementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  optionSeller(): Address {
    let result = super.call("optionSeller", "optionSeller():(address)", []);

    return result[0].toAddress();
  }

  try_optionSeller(): ethereum.CallResult<Address> {
    let result = super.tryCall("optionSeller", "optionSeller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOptionSeller(): Address {
    let result = super.call(
      "pendingOptionSeller",
      "pendingOptionSeller():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pendingOptionSeller(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingOptionSeller",
      "pendingOptionSeller():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShare(): BigInt {
    let result = super.call("pricePerShare", "pricePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pricePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundPricePerShare(param0: BigInt): BigInt {
    let result = super.call(
      "roundPricePerShare",
      "roundPricePerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_roundPricePerShare(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "roundPricePerShare",
      "roundPricePerShare(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareBalances(account: Address): RibbonEarnVault__shareBalancesResult {
    let result = super.call(
      "shareBalances",
      "shareBalances(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new RibbonEarnVault__shareBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_shareBalances(
    account: Address
  ): ethereum.CallResult<RibbonEarnVault__shareBalancesResult> {
    let result = super.tryCall(
      "shareBalances",
      "shareBalances(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__shareBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shares(account: Address): BigInt {
    let result = super.call("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_shares(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("shares", "shares(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalance(): BigInt {
    let result = super.call("totalBalance", "totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBalance", "totalBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrowerWeight(): BigInt {
    let result = super.call(
      "totalBorrowerWeight",
      "totalBorrowerWeight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBorrowerWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBorrowerWeight",
      "totalBorrowerWeight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPending(): BigInt {
    let result = super.call("totalPending", "totalPending():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPending(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPending", "totalPending():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultParams(): RibbonEarnVault__vaultParamsResult {
    let result = super.call(
      "vaultParams",
      "vaultParams():(uint8,address,uint56,uint104)",
      []
    );

    return new RibbonEarnVault__vaultParamsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_vaultParams(): ethereum.CallResult<RibbonEarnVault__vaultParamsResult> {
    let result = super.tryCall(
      "vaultParams",
      "vaultParams():(uint8,address,uint56,uint104)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__vaultParamsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  vaultPauser(): Address {
    let result = super.call("vaultPauser", "vaultPauser():(address)", []);

    return result[0].toAddress();
  }

  try_vaultPauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultPauser", "vaultPauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultState(): RibbonEarnVault__vaultStateResult {
    let result = super.call(
      "vaultState",
      "vaultState():(uint16,uint104,uint104,uint128,uint128,uint64,uint64,uint128,uint256)",
      []
    );

    return new RibbonEarnVault__vaultStateResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_vaultState(): ethereum.CallResult<RibbonEarnVault__vaultStateResult> {
    let result = super.tryCall(
      "vaultState",
      "vaultState():(uint16,uint104,uint104,uint128,uint128,uint64,uint64,uint128,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__vaultStateResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  withdrawals(param0: Address): RibbonEarnVault__withdrawalsResult {
    let result = super.call(
      "withdrawals",
      "withdrawals(address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new RibbonEarnVault__withdrawalsResult(
      result[0].toI32(),
      result[1].toBigInt()
    );
  }

  try_withdrawals(
    param0: Address
  ): ethereum.CallResult<RibbonEarnVault__withdrawalsResult> {
    let result = super.tryCall(
      "withdrawals",
      "withdrawals(address):(uint16,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RibbonEarnVault__withdrawalsResult(
        value[0].toI32(),
        value[1].toBigInt()
      )
    );
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyOptionCall extends ethereum.Call {
  get inputs(): BuyOptionCall__Inputs {
    return new BuyOptionCall__Inputs(this);
  }

  get outputs(): BuyOptionCall__Outputs {
    return new BuyOptionCall__Outputs(this);
  }
}

export class BuyOptionCall__Inputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }
}

export class BuyOptionCall__Outputs {
  _call: BuyOptionCall;

  constructor(call: BuyOptionCall) {
    this._call = call;
  }
}

export class CommitOptionSellerCall extends ethereum.Call {
  get inputs(): CommitOptionSellerCall__Inputs {
    return new CommitOptionSellerCall__Inputs(this);
  }

  get outputs(): CommitOptionSellerCall__Outputs {
    return new CommitOptionSellerCall__Outputs(this);
  }
}

export class CommitOptionSellerCall__Inputs {
  _call: CommitOptionSellerCall;

  constructor(call: CommitOptionSellerCall) {
    this._call = call;
  }
}

export class CommitOptionSellerCall__Outputs {
  _call: CommitOptionSellerCall;

  constructor(call: CommitOptionSellerCall) {
    this._call = call;
  }
}

export class CompleteWithdrawCall extends ethereum.Call {
  get inputs(): CompleteWithdrawCall__Inputs {
    return new CompleteWithdrawCall__Inputs(this);
  }

  get outputs(): CompleteWithdrawCall__Outputs {
    return new CompleteWithdrawCall__Outputs(this);
  }
}

export class CompleteWithdrawCall__Inputs {
  _call: CompleteWithdrawCall;

  constructor(call: CompleteWithdrawCall) {
    this._call = call;
  }
}

export class CompleteWithdrawCall__Outputs {
  _call: CompleteWithdrawCall;

  constructor(call: CompleteWithdrawCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get creditor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _initParams(): InitializeCall_initParamsStruct {
    return this._call.inputValues[0].value.toTuple() as InitializeCall_initParamsStruct;
  }

  get _vaultParams(): InitializeCall_vaultParamsStruct {
    return this._call.inputValues[1].value.toTuple() as InitializeCall_vaultParamsStruct;
  }

  get _allocationState(): InitializeCall_allocationStateStruct {
    return this._call.inputValues[2].value.toTuple() as InitializeCall_allocationStateStruct;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_initParamsStruct extends ethereum.Tuple {
  get _owner(): Address {
    return this[0].toAddress();
  }

  get _keeper(): Address {
    return this[1].toAddress();
  }

  get _borrowers(): Array<Address> {
    return this[2].toAddressArray();
  }

  get _borrowerWeights(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get _optionSeller(): Address {
    return this[4].toAddress();
  }

  get _feeRecipient(): Address {
    return this[5].toAddress();
  }

  get _managementFee(): BigInt {
    return this[6].toBigInt();
  }

  get _performanceFee(): BigInt {
    return this[7].toBigInt();
  }

  get _tokenName(): string {
    return this[8].toString();
  }

  get _tokenSymbol(): string {
    return this[9].toString();
  }
}

export class InitializeCall_vaultParamsStruct extends ethereum.Tuple {
  get decimals(): i32 {
    return this[0].toI32();
  }

  get asset(): Address {
    return this[1].toAddress();
  }

  get minimumSupply(): BigInt {
    return this[2].toBigInt();
  }

  get cap(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitializeCall_allocationStateStruct extends ethereum.Tuple {
  get nextLoanTermLength(): BigInt {
    return this[0].toBigInt();
  }

  get nextOptionPurchaseFreq(): BigInt {
    return this[1].toBigInt();
  }

  get currentLoanTermLength(): BigInt {
    return this[2].toBigInt();
  }

  get currentOptionPurchaseFreq(): BigInt {
    return this[3].toBigInt();
  }

  get loanAllocationPCT(): i32 {
    return this[4].toI32();
  }

  get optionAllocationPCT(): i32 {
    return this[5].toI32();
  }

  get loanAllocation(): BigInt {
    return this[6].toBigInt();
  }

  get optionAllocation(): BigInt {
    return this[7].toBigInt();
  }
}

export class InitiateWithdrawCall extends ethereum.Call {
  get inputs(): InitiateWithdrawCall__Inputs {
    return new InitiateWithdrawCall__Inputs(this);
  }

  get outputs(): InitiateWithdrawCall__Outputs {
    return new InitiateWithdrawCall__Outputs(this);
  }
}

export class InitiateWithdrawCall__Inputs {
  _call: InitiateWithdrawCall;

  constructor(call: InitiateWithdrawCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitiateWithdrawCall__Outputs {
  _call: InitiateWithdrawCall;

  constructor(call: InitiateWithdrawCall) {
    this._call = call;
  }
}

export class MaxRedeemCall extends ethereum.Call {
  get inputs(): MaxRedeemCall__Inputs {
    return new MaxRedeemCall__Inputs(this);
  }

  get outputs(): MaxRedeemCall__Outputs {
    return new MaxRedeemCall__Outputs(this);
  }
}

export class MaxRedeemCall__Inputs {
  _call: MaxRedeemCall;

  constructor(call: MaxRedeemCall) {
    this._call = call;
  }
}

export class MaxRedeemCall__Outputs {
  _call: MaxRedeemCall;

  constructor(call: MaxRedeemCall) {
    this._call = call;
  }
}

export class PausePositionCall extends ethereum.Call {
  get inputs(): PausePositionCall__Inputs {
    return new PausePositionCall__Inputs(this);
  }

  get outputs(): PausePositionCall__Outputs {
    return new PausePositionCall__Outputs(this);
  }
}

export class PausePositionCall__Inputs {
  _call: PausePositionCall;

  constructor(call: PausePositionCall) {
    this._call = call;
  }
}

export class PausePositionCall__Outputs {
  _call: PausePositionCall;

  constructor(call: PausePositionCall) {
    this._call = call;
  }
}

export class PayOptionYieldCall extends ethereum.Call {
  get inputs(): PayOptionYieldCall__Inputs {
    return new PayOptionYieldCall__Inputs(this);
  }

  get outputs(): PayOptionYieldCall__Outputs {
    return new PayOptionYieldCall__Outputs(this);
  }
}

export class PayOptionYieldCall__Inputs {
  _call: PayOptionYieldCall;

  constructor(call: PayOptionYieldCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayOptionYieldCall__Outputs {
  _call: PayOptionYieldCall;

  constructor(call: PayOptionYieldCall) {
    this._call = call;
  }
}

export class PayOptionYield1Call extends ethereum.Call {
  get inputs(): PayOptionYield1Call__Inputs {
    return new PayOptionYield1Call__Inputs(this);
  }

  get outputs(): PayOptionYield1Call__Outputs {
    return new PayOptionYield1Call__Outputs(this);
  }
}

export class PayOptionYield1Call__Inputs {
  _call: PayOptionYield1Call;

  constructor(call: PayOptionYield1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class PayOptionYield1Call__Outputs {
  _call: PayOptionYield1Call;

  constructor(call: PayOptionYield1Call) {
    this._call = call;
  }
}

export class RecoverTokensCall extends ethereum.Call {
  get inputs(): RecoverTokensCall__Inputs {
    return new RecoverTokensCall__Inputs(this);
  }

  get outputs(): RecoverTokensCall__Outputs {
    return new RecoverTokensCall__Outputs(this);
  }
}

export class RecoverTokensCall__Inputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RecoverTokensCall__Outputs {
  _call: RecoverTokensCall;

  constructor(call: RecoverTokensCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReturnLentFundsCall extends ethereum.Call {
  get inputs(): ReturnLentFundsCall__Inputs {
    return new ReturnLentFundsCall__Inputs(this);
  }

  get outputs(): ReturnLentFundsCall__Outputs {
    return new ReturnLentFundsCall__Outputs(this);
  }
}

export class ReturnLentFundsCall__Inputs {
  _call: ReturnLentFundsCall;

  constructor(call: ReturnLentFundsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReturnLentFundsCall__Outputs {
  _call: ReturnLentFundsCall;

  constructor(call: ReturnLentFundsCall) {
    this._call = call;
  }
}

export class ReturnLentFunds1Call extends ethereum.Call {
  get inputs(): ReturnLentFunds1Call__Inputs {
    return new ReturnLentFunds1Call__Inputs(this);
  }

  get outputs(): ReturnLentFunds1Call__Outputs {
    return new ReturnLentFunds1Call__Outputs(this);
  }
}

export class ReturnLentFunds1Call__Inputs {
  _call: ReturnLentFunds1Call;

  constructor(call: ReturnLentFunds1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ReturnLentFunds1Call__Outputs {
  _call: ReturnLentFunds1Call;

  constructor(call: ReturnLentFunds1Call) {
    this._call = call;
  }
}

export class RollToNextRoundCall extends ethereum.Call {
  get inputs(): RollToNextRoundCall__Inputs {
    return new RollToNextRoundCall__Inputs(this);
  }

  get outputs(): RollToNextRoundCall__Outputs {
    return new RollToNextRoundCall__Outputs(this);
  }
}

export class RollToNextRoundCall__Inputs {
  _call: RollToNextRoundCall;

  constructor(call: RollToNextRoundCall) {
    this._call = call;
  }
}

export class RollToNextRoundCall__Outputs {
  _call: RollToNextRoundCall;

  constructor(call: RollToNextRoundCall) {
    this._call = call;
  }
}

export class SetCapCall extends ethereum.Call {
  get inputs(): SetCapCall__Inputs {
    return new SetCapCall__Inputs(this);
  }

  get outputs(): SetCapCall__Outputs {
    return new SetCapCall__Outputs(this);
  }
}

export class SetCapCall__Inputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }

  get newCap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCapCall__Outputs {
  _call: SetCapCall;

  constructor(call: SetCapCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetLiquidityGaugeCall extends ethereum.Call {
  get inputs(): SetLiquidityGaugeCall__Inputs {
    return new SetLiquidityGaugeCall__Inputs(this);
  }

  get outputs(): SetLiquidityGaugeCall__Outputs {
    return new SetLiquidityGaugeCall__Outputs(this);
  }
}

export class SetLiquidityGaugeCall__Inputs {
  _call: SetLiquidityGaugeCall;

  constructor(call: SetLiquidityGaugeCall) {
    this._call = call;
  }

  get newLiquidityGauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidityGaugeCall__Outputs {
  _call: SetLiquidityGaugeCall;

  constructor(call: SetLiquidityGaugeCall) {
    this._call = call;
  }
}

export class SetLoanAllocationPCTCall extends ethereum.Call {
  get inputs(): SetLoanAllocationPCTCall__Inputs {
    return new SetLoanAllocationPCTCall__Inputs(this);
  }

  get outputs(): SetLoanAllocationPCTCall__Outputs {
    return new SetLoanAllocationPCTCall__Outputs(this);
  }
}

export class SetLoanAllocationPCTCall__Inputs {
  _call: SetLoanAllocationPCTCall;

  constructor(call: SetLoanAllocationPCTCall) {
    this._call = call;
  }

  get _loanAllocationPCT(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetLoanAllocationPCTCall__Outputs {
  _call: SetLoanAllocationPCTCall;

  constructor(call: SetLoanAllocationPCTCall) {
    this._call = call;
  }
}

export class SetLoanTermLengthCall extends ethereum.Call {
  get inputs(): SetLoanTermLengthCall__Inputs {
    return new SetLoanTermLengthCall__Inputs(this);
  }

  get outputs(): SetLoanTermLengthCall__Outputs {
    return new SetLoanTermLengthCall__Outputs(this);
  }
}

export class SetLoanTermLengthCall__Inputs {
  _call: SetLoanTermLengthCall;

  constructor(call: SetLoanTermLengthCall) {
    this._call = call;
  }

  get _loanTermLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLoanTermLengthCall__Outputs {
  _call: SetLoanTermLengthCall;

  constructor(call: SetLoanTermLengthCall) {
    this._call = call;
  }
}

export class SetManagementFeeCall extends ethereum.Call {
  get inputs(): SetManagementFeeCall__Inputs {
    return new SetManagementFeeCall__Inputs(this);
  }

  get outputs(): SetManagementFeeCall__Outputs {
    return new SetManagementFeeCall__Outputs(this);
  }
}

export class SetManagementFeeCall__Inputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }

  get newManagementFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagementFeeCall__Outputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }
}

export class SetNewKeeperCall extends ethereum.Call {
  get inputs(): SetNewKeeperCall__Inputs {
    return new SetNewKeeperCall__Inputs(this);
  }

  get outputs(): SetNewKeeperCall__Outputs {
    return new SetNewKeeperCall__Outputs(this);
  }
}

export class SetNewKeeperCall__Inputs {
  _call: SetNewKeeperCall;

  constructor(call: SetNewKeeperCall) {
    this._call = call;
  }

  get newKeeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewKeeperCall__Outputs {
  _call: SetNewKeeperCall;

  constructor(call: SetNewKeeperCall) {
    this._call = call;
  }
}

export class SetOptionPurchaseFrequencyCall extends ethereum.Call {
  get inputs(): SetOptionPurchaseFrequencyCall__Inputs {
    return new SetOptionPurchaseFrequencyCall__Inputs(this);
  }

  get outputs(): SetOptionPurchaseFrequencyCall__Outputs {
    return new SetOptionPurchaseFrequencyCall__Outputs(this);
  }
}

export class SetOptionPurchaseFrequencyCall__Inputs {
  _call: SetOptionPurchaseFrequencyCall;

  constructor(call: SetOptionPurchaseFrequencyCall) {
    this._call = call;
  }

  get _optionPurchaseFreq(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOptionPurchaseFrequencyCall__Outputs {
  _call: SetOptionPurchaseFrequencyCall;

  constructor(call: SetOptionPurchaseFrequencyCall) {
    this._call = call;
  }
}

export class SetOptionSellerCall extends ethereum.Call {
  get inputs(): SetOptionSellerCall__Inputs {
    return new SetOptionSellerCall__Inputs(this);
  }

  get outputs(): SetOptionSellerCall__Outputs {
    return new SetOptionSellerCall__Outputs(this);
  }
}

export class SetOptionSellerCall__Inputs {
  _call: SetOptionSellerCall;

  constructor(call: SetOptionSellerCall) {
    this._call = call;
  }

  get newOptionSeller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOptionSellerCall__Outputs {
  _call: SetOptionSellerCall;

  constructor(call: SetOptionSellerCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get newPerformanceFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetVaultPauserCall extends ethereum.Call {
  get inputs(): SetVaultPauserCall__Inputs {
    return new SetVaultPauserCall__Inputs(this);
  }

  get outputs(): SetVaultPauserCall__Outputs {
    return new SetVaultPauserCall__Outputs(this);
  }
}

export class SetVaultPauserCall__Inputs {
  _call: SetVaultPauserCall;

  constructor(call: SetVaultPauserCall) {
    this._call = call;
  }

  get newVaultPauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultPauserCall__Outputs {
  _call: SetVaultPauserCall;

  constructor(call: SetVaultPauserCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBorrowerBasketCall extends ethereum.Call {
  get inputs(): UpdateBorrowerBasketCall__Inputs {
    return new UpdateBorrowerBasketCall__Inputs(this);
  }

  get outputs(): UpdateBorrowerBasketCall__Outputs {
    return new UpdateBorrowerBasketCall__Outputs(this);
  }
}

export class UpdateBorrowerBasketCall__Inputs {
  _call: UpdateBorrowerBasketCall;

  constructor(call: UpdateBorrowerBasketCall) {
    this._call = call;
  }

  get borrowers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get borrowerWeights(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateBorrowerBasketCall__Outputs {
  _call: UpdateBorrowerBasketCall;

  constructor(call: UpdateBorrowerBasketCall) {
    this._call = call;
  }
}

export class WithdrawInstantlyCall extends ethereum.Call {
  get inputs(): WithdrawInstantlyCall__Inputs {
    return new WithdrawInstantlyCall__Inputs(this);
  }

  get outputs(): WithdrawInstantlyCall__Outputs {
    return new WithdrawInstantlyCall__Outputs(this);
  }
}

export class WithdrawInstantlyCall__Inputs {
  _call: WithdrawInstantlyCall;

  constructor(call: WithdrawInstantlyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawInstantlyCall__Outputs {
  _call: WithdrawInstantlyCall;

  constructor(call: WithdrawInstantlyCall) {
    this._call = call;
  }
}
