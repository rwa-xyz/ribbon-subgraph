type InstrumentPosition @entity {
  id: ID!
  instrumentAddress: Bytes!
  account: Bytes!
  cost: BigInt!
  exercised: Boolean!
  amount: BigInt!
  optionTypes: [Int!]!
  strikePrices: [BigInt!]!
  venues: [String!]!
  expiry: BigInt!
  exerciseProfit: BigInt
}

type Vault @entity {
  id: ID! # vault contract address
  name: String!
  symbol: String!
  underlyingAsset: Bytes!
  underlyingName: String!
  underlyingSymbol: String!
  underlyingDecimals: Int!
  totalPremiumEarned: BigInt!
  totalWithdrawalFee: BigInt!
  # We track this number by adding every deposits from outside of vault
  totalNominalVolume: BigInt!
  # We track this number by adding every open short. This value is in USD, with 16 decimals
  totalNotionalVolume: BigInt!
  numDepositors: Int!
  depositors: [Bytes!]!
  vaultAccounts: [VaultAccount!]! @derivedFrom(field: "vault")
  totalBalance: BigInt!
  lockedAmount: BigInt!
  cap: BigInt!

  "Internally used to track performance updates"
  performanceUpdateCounter: Int!
}

type VaultShortPosition @entity {
  id: ID! # option contract address
  vault: Vault!
  option: Bytes!
  depositAmount: BigInt!
  withdrawAmount: BigInt
  mintAmount: BigInt!
  loss: BigInt
  isExercised: Boolean
  initiatedBy: Bytes!
  strikePrice: BigInt!
  expiry: BigInt!
  openedAt: BigInt!
  closedAt: BigInt
  premiumEarned: BigInt!
  openTxhash: Bytes!
  closeTxhash: Bytes
  trades: [VaultOptionTrade!]! @derivedFrom(field: "vaultShortPosition")
}

type VaultOptionTrade @entity {
  id: ID! # optionToken-txhash-logindex
  vault: Vault!
  vaultShortPosition: VaultShortPosition!
  buyer: Bytes!
  sellAmount: BigInt!
  premium: BigInt!
  optionToken: Bytes!
  premiumToken: Bytes!
  timestamp: BigInt!
  txhash: Bytes!
}

type VaultTransaction @entity {
  id: ID!
  vault: Vault!
  type: String!
  address: Bytes!
  txhash: Bytes!
  timestamp: BigInt!
  amount: BigInt!
  underlyingAmount: BigInt! # Used to keep track with underlying amount of stake and unstake transaction
  fee: BigInt!
}

type VaultAccount @entity {
  id: ID! # vaultAddress-accountAddress
  vault: Vault!
  account: Bytes!
  updateCounter: Int! # used internally to track BalanceUpdates
  totalYieldEarned: BigInt! # Account's lifetime yield earned from the vault
  totalDeposits: BigInt! # Account's total deposits into the vault (Withdrawal as accounted)
  totalBalance: BigInt! # To track the current balance, so we can caluclate the net profit/loss
  shares: BigInt!
  totalStakedShares: BigInt!
  totalStakedBalance: BigInt!
}

type BalanceUpdate @entity {
  id: ID! # accountAddress-timestamp
  vault: Vault!
  account: Bytes!
  timestamp: Int!
  balance: BigInt! # Account's balance in the vault at a point in time
  yieldEarned: BigInt! # Yield earned from a trade at a point in time
  isWithdraw: Boolean!
  stakedBalance: BigInt!
}

type VaultLiquidityMiningPool @entity {
  id: ID!
  numDepositors: Int!
  depositors: [Bytes!]!
  poolAccounts: [VaultLiquidityMiningPoolAccount!]! @derivedFrom(field: "pool")
  totalSupply: BigInt! # totalSupply, represent pool size
  totalRewardClaimed: BigInt! # Pool ifetime reward claimed
}

type VaultLiquidityMiningPoolAccount @entity {
  id: ID! # vaultLiquidityMiningPoolAddress-accountAddress
  pool: VaultLiquidityMiningPool!
  account: Bytes!
  totalRewardClaimed: BigInt! # Account's lifetime reward claimed
  totalBalance: BigInt! # To track the current balance
}

type ERC20Token @entity {
  id: ID! # token contract address
  name: String!
  symbol: String!
  numHolders: Int!
  holders: [Bytes!]!
  tokenAccounts: [ERC20TokenAccount!]! @derivedFrom(field: "token")
  totalSupply: BigInt!
}

type ERC20TokenAccount @entity {
  id: ID! # ERC20TokenID-accountAddress
  token: ERC20Token!
  balance: BigInt!
  account: Bytes!
}

type VaultPerformanceUpdate @entity {
  id: ID!
  vault: Vault!
  pricePerShare: BigInt!
  timestamp: Int!
}
